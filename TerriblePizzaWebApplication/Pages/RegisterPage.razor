@page "/login/register"
@inject DataBaseService service
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager

    <hr />
    <hr />
    <hr />
    <hr />
    <hr />

    <div class="center">
        <div class="p-3 mb-1 bg-transparent title text-center">Please enter your credentials below:</div>
        <form @onsubmit="TryRegister">
            <div class="form-group">
                <label class="labelrow">Username:</label>
                <input type="text" class="form-control inputrow" @bind="username" />
            </div>

            <div class="form-group">
                <label class="labelrow">Password:</label>
                <input type="text" class="form-control inputrow" @bind="password" />
            </div>
            
            <div class="form-group">
                <label class="labelrow">Name:</label>
                <input type="text" class="form-control inputrow" @bind="name" />
            </div>
            
            <div class="form-group">
                <label class="labelrow">Email:</label>
                <input type="text" class="form-control inputrow" @bind="email" />
            </div>
            
            <div class="form-group">
                <input type="submit" value="Submit" class="btn btn-primary" style="margin-top: 20px;" />
                <input type="button" value="Cancel" class="btn btn-primary" style="margin-top: 20px;" @onclick="CancelRegister" />
            </div>
        </form>

        @if (invalid is true) {
            <label class="text-warning" style="margin-top: 10px;">Invalid Credentials.</label>
        }

    </div>


    @code{
        private UserAccount Account;
        private string username, password, name, email;
        private bool invalid = false;

        private async Task TryRegister() {
            if (string.IsNullOrWhiteSpace(username) ||
                string.IsNullOrWhiteSpace(password) ||
                string.IsNullOrWhiteSpace(name) ||
                string.IsNullOrWhiteSpace(email)) {
                invalid = true;
                return;
            }

            Random randy = new Random(897897);
            UserAccount result;
            try {

                int x = randy.Next(50000);
                UserAccount newAccount = new UserAccount(x, username, password, name, email);
                await service.AddAccountAsync(newAccount);
            }
            catch (Exception) {
                int x = randy.Next(50000);
                UserAccount newAccount = new UserAccount(x, username, password, name, email);
                await service.AddAccountAsync(newAccount);
                invalid = true;
                return;
            }
            NavigationManager.NavigateTo("/");
        }

        private async Task CancelRegister() {
            NavigationManager.NavigateTo("/login");
        }
    }
