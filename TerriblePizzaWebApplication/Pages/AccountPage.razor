@page "/myaccount"
@inject MyDbService service
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedSessionStore
@inject NavigationManager NavigationManager



<h1>Account Page</h1>
<hr style="border: 1px solid #800000" />

<div class="center">

    <div class="p-3 mb-1 bg-transparent title text-center">Update User Account</div>
    <EditForm Model="@Account">
        <div class="form-group">
            <label class="labelrow" for="username">Username</label>
            <input type="text" id="username" class="form-control inputrow" @bind-value="@Account.Username" />
        </div>
        <div class="form-group">
            <label class="labelrow" for="password">Password</label>
            <input type="text" id="password" class="form-control inputrow" @bind="@Account.Password" />
        </div>
        <div class="form-group">
            <label class="labelrow" for="name">Name</label>
            <input type="text" id="name" class="form-control inputrow" @bind="@Account.Name" />
        </div>
        <div class="form-group">
            <label class="labelrow" for="email">Email</label>
            <input type="text" id="email" class="form-control inputrow" @bind="@Account.Email" />
        </div>
        <div class="text-center p-3 mb-3">
            <button class="btn btn-info" @onclick="UpdateAccountData"> Update Account</button>
            <button class="btn btn-info" @onclick="LogoutUser">Log out</button>
            <button class="btn btn-info" @onclick="DeleteAccount">Delete Account</button>
        </div>
    </EditForm>
</div>


@code{

    List<UserAccount> Accounts;
    private int id = -1;
    public UserAccount Account { get; set; } = new UserAccount();

    protected override async Task OnInitializedAsync() {
        var result = await ProtectedSessionStore.GetAsync<UserAccount>("account");
        if (result.Value is not null) {
            Account = result.Value;
            id = Account.Id;
            await RefreshAccount();
        }

    }

    private async Task RefreshAccount() {
        Account = await service.GetAccountIdAsync(id);
    }

    private void LogoutUser() {
        ProtectedSessionStore.DeleteAsync("account");
        NavigationManager.NavigateTo("/login");
    }

    private async Task UpdateAccountData() {
        await service.UpdateAccountAsync(Account);
        await RefreshAccount();
    }
    private async Task DeleteAccount() {
        await service.DeleteAccountAsync(Account);
        NavigationManager.NavigateTo("/login");
    }
}
